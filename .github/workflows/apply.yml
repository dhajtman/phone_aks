name: 'Apply'

on:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed

permissions:
  contents: read

jobs:
  terraform:
    name: 'Apply'
    runs-on: ubuntu-latest
    env:
      TF_DIR: terraform
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
      TF_CLOUD_WORKSPACE: ${{ secrets.TF_CLOUD_WORKSPACE }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        id: backend
        run: |
          cat > "${TF_DIR}"/backend.tf << EOF
          terraform {
            backend "remote" {
               organization = "${TF_CLOUD_ORGANIZATION}"
              
               workspaces {
                 name = "${TF_CLOUD_WORKSPACE}"
               }
            }
          }
          EOF

      - name: Check ARM_ env vars
        run: |
          env | grep ARM_
          echo "Terraform version: $(terraform version)"

      - name: Terraform Apply
        run: |
          terraform -chdir=$TF_DIR init -reconfigure
          terraform -chdir=$TF_DIR apply -auto-approve
          terraform -chdir=$TF_DIR output